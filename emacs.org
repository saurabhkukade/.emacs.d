* Package Manager
  Setting package-archives melpa and package initialization.

  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
            '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)
    (setq inhibit-startup-message t) ;; get rid of startup screen
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
  #+END_SRC

* org-mode setup
  Ensuring org mode.

  #+BEGIN_SRC emacs-lisp
    (use-package org
    :ensure t)
  #+END_SRC

  I want to see bullets instead of asterisks in org mode.

  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

  Down pointing arrow instead of typical "..." default org-mode symbol at the
  end of heading.

  #+BEGIN_SRC emacs-lisp
    (setq org-ellipsis "⤵")
  #+END_SRC

  Loading language interpreters to org-mode as org-load-languages

  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)))
  #+END_SRC

* line numbers
  Setting linum mode for showing line numbers with
  some fancy delimeters.

  #+BEGIN_SRC emacs-lisp
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")
  #+END_SRC

* auto pair bracket
  Setting electric pair mode for aut-fill matching bracket.

  #+BEGIN_SRC emacs-lisp
    (electric-pair-mode)
  #+END_SRC

* try package
  Try is use to just try any specific package of current session.
  It does not install any package for future sessions.

  #+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
  #+END_SRC

* Whick Key
  Shows all configuraion of pressed key(s).

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  #+END_SRC

* Evil mode
  Haha! Thats what takes me to emacs.
  Vi key bindings in emacs.
  If you are vi user and shifted to emacs
  then this for you(us).

  #+BEGIN_SRC emacs-lisp
    (setq evil-want-C-i-jump nil)
    (use-package evil
    :ensure t
    :config
    (evil-mode))
  #+END_SRC

* Ace window
  Ace window configuration.
  More help on https://github.com/abo-abo/ace-window

  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
  #+END_SRC
* Magit

  #+BEGIN_SRC emacs-lisp
    (use-package magit
    :ensure t)
  #+END_SRC

* Swipper and Counsel
  Some fancy search configurations with key-bindings.

  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      )

    (use-package swiper
      :ensure try
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))

    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))

    (use-package avy
      :ensure t
      :config
      (avy-setup-default))

  #+END_SRC

* auto-complete
  Auto complete config.
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC

* Theme config
  Treat all themes as safe. Avoiding prompt for yes and no.

  #+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  #+END_SRC

  Ensuring badger-thene package is installed and loaded
  #+BEGIN_SRC emacs-lisp
    (use-package monokai-theme
    :ensure t
    :config (load-theme 'monokai))
  #+END_SRC

* flycheck jedi yasnippet
  Flycheck for syntax checking in emacs.
  Jedi for python development.
  Yasnippet for code auto-completion.

  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

    (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))


    (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  #+END_SRC

* save place
  Remember last position in a file.

  #+BEGIN_SRC emacs-lisp
  (use-package saveplace
  :ensure t
  :init (save-place-mode))
  #+END_SRC

* Show parenthesis
  Show parenthesis matching.

  #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
  #+END_SRC

* IRC Clinet
  ERC - emacs IRC client

  #+BEGIN_SRC emacs-lisp
    (require 'erc)
  #+END_SRC

* Ensime
  Scala emacs IDE

  #+BEGIN_SRC emacs-lisp
  (use-package ensime
  :ensure t
  :pin melpa)
  (add-to-list 'exec-path "/usr/local/bin")
  #+END_SRC

* PHP Mode
  #+BEGIN_SRC emacs-lisp
  (use-package php-mode
  :ensure t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
  :ensure t)
  #+END_SRC

* Haskell Mode

  #+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
  :ensure t)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  #+END_SRC

* Agenda org
  #+BEGIN_SRC emacs-lisp
 ;;(setq org-agenda-files (list "~/org"))
 (add-to-list 'org-agenda-files "~/org/myAgenda.org")
  #+END_SRC
* Open-file-at-cursor
  Function to open a file at a cursor but without prompting for
  yes or no.

  #+BEGIN_SRC emacs-lisp
    (defun xah-open-file-at-cursor ()
    "Open the file path under cursor.
    Using given emacs function find-file-at-point but without prompt"
    (interactive)
    (let ((-path (if (use-region-p)
                    (buffer-substring-no-properties (region-beginning) (region-end))
                    (let (p0 p1 p2)
                    (setq p0 (point))
                    ;; chars that are likely to be delimiters of full path, e.g. space, tabs, brakets.
                    (skip-chars-backward "^  \"\t\n`'|()[]{}<>〔〕“”〈〉《》【】〖〗«»‹›·。\\`")
                    (setq p1 (point))
                    (goto-char p0)
                    (skip-chars-forward "^  \"\t\n`'|()[]{}<>〔〕“”〈〉《》【】〖〗«»‹›·。\\'")
                    (setq p2 (point))
                    (goto-char p0)
                    (buffer-substring-no-properties p1 p2)))))
        (if (string-match-p "\\`https?://" -path)
            (browse-url -path)
        (progn ; not starting “http://”
            (if (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\'" -path)
                (progn
                (let (
                        (-fpath (match-string 1 -path))
                        (-line-num (string-to-number (match-string 2 -path))))
                    (if (file-exists-p -fpath)
                        (progn
                        (find-file -fpath)
                        (goto-char 1)
                        (forward-line (1- -line-num)))
                    (progn
                        (when (y-or-n-p (format "file doesn't exist: 「%s」. Create?" -fpath))
                        (find-file -fpath))))))
            (progn
                (if (file-exists-p -path)
                    (find-file -path)
                (if (file-exists-p (concat -path ".el"))
                    (find-file (concat -path ".el"))
                    (when (y-or-n-p (format "file doesn't exist: 「%s」. Create?" -path))
                    (find-file -path ))))))))))
  #+END_SRC
* My key bindings

* Electric space and operator
  #+BEGIN_SRC emacs-lisp
  (use-package electric-operator
  :ensure t)
  #+END_SRC

* Personal key bindings.

  #+BEGIN_SRC emacs-lisp
 (defun load-emacs-org () (interactive) (find-file "~/.emacs.d/emacs.org"))
 (defun electric-modes ()
        (interactive)
        (electric-spacing-mode t)
        (electric-operator-mode t))
 (global-set-key (kbd "C-c a") 'org-agenda) ;;get agenda in org mode
 (global-set-key (kbd "C-c f") 'xah-open-file-at-cursor) ;; open file under cursor
 (global-set-key (kbd "M-f") 'comint-dynamic-complete-filename) ;; complete file-path
 (global-set-key (kbd "<f1>") 'string-inflection-all-cycle) ;; string-inflection-all-cycle
 (global-set-key (kbd "C-c C-g") 'load-emacs-org) ;; string-inflection-all-cycle
 (global-set-key (kbd "C-x C-g") 'electric-modes) ;; string-inflection-all-cycle
 (global-set-key (kbd "C-+") 'text-scale-increase)
 (global-set-key (kbd "C--") 'text-scale-decrease)
  #+END_SRC

  #+RESULTS:
  : load-emacs-org

* string-inflection-all-cycle
*  Don't make backup(~) files
  #+BEGIN_SRC emacs-lisp
    (defun make-backup-file-name (FILE)
    (let ((dirname (concat "~/.backups/emacs/"
                            (format-time-string "%y/%m/%d/"))))
        (if (not (file-exists-p dirname))
            (make-directory dirname t))
        (concat dirname (file-name-nondirectory FILE))))
  #+END_SRC

* Yes or No
  #+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* iedit
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
    :ensure t)

    (defun iedit-dwim (arg)
    "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
    (interactive "P")
    (if arg
        (iedit-mode)
        (save-excursion
        (save-restriction
            (widen)
            ;; this function determines the scope of `iedit-start'.
            (if iedit-mode
                (iedit-done)
            ;; `current-word' can of course be replaced by other
            ;; functions.
            (narrow-to-defun)
            (iedit-start (current-word) (point-min) (point-max)))))))



    (global-set-key (kbd "C-;") 'iedit-dwim)
  #+END_SRC

* Highlight-line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (set-face-background 'hl-line "#3e4446")
  (set-face-foreground 'highlight nil)
#+END_SRC
* Go Mode
  #+BEGIN_SRC emacs-lisp
  (use-package go-mode
  :ensure t)

  (use-package exec-path-from-shell
  :ensure t)
  (defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell (replace-regexp-in-string
                          "[ \t\n]*$"
                          ""
                          (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq eshell-path-env path-from-shell) ; for eshell users
    (setq exec-path (split-string path-from-shell path-separator))))

    (when window-system (set-exec-path-from-shell-PATH))

    (setenv "GOPATH" "/home/saurabh/go/bin")
    (setenv "GOROOT" "/home/saurabh/go")
    (add-to-list 'exec-path "/home/saurabh/go/bin")
    (defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  )
  (add-hook 'go-mode-hook 'my-go-mode-hook)

  (defun auto-complete-for-go ()
  (auto-complete-mode 1))
  (add-hook 'go-mode-hook 'auto-complete-for-go)
  (with-eval-after-load 'go-mode
   (require 'go-autocomplete))

  #+END_SRC

* Load custom functions
  #+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/defuns.el")
  #+END_SRC
* Cycle through buffer
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'other-window)
  (global-set-key (kbd "C-,") 'prev-window)

  (defun prev-window ()
    (interactive)
    (other-window -1))

  #+END_SRC
* Scroll one line
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
#+END_SRC
* Abbrevs
#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
(read-abbrev-file "~/.emacs.d/abbrev_defs")
(setq save-abbrevs t)
#+END_SRC
* Drag stuff
#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
    :ensure t
    :config (drag-stuff-global-mode))
#+END_SRC
* Bind Key
  #+BEGIN_SRC emacs-lisp
    (use-package bind-key
      :ensure t)
    (bind-key "M-7" 'linum-mode)
    (bind-key "M-k" ''kill-this-buffer)
    (bind-key "M-1" 'delete-other-windows)
    (bind-key "M-g" 'google)
    (bind-key "C-c n" 'clean-up-buffer-or-region)
    (bind-key "C-c s" 'swap_windows)
    (bind-key "M-j" 'join-line-or-lines-in-region)
    (bind-key "<M-up>" 'drag-stuff-up)
    (bind-key "<M-down>" 'drag-stuff-down)
    (bind-key "<M-left>" 'next-buffer)
    (bind-key "<M-right>" 'previous-buffer)

  #+END_SRC
# ;; * Hide Unwanted Buffers
# #+BEGIN_SRC emacs-lisp
# ;; Makes *scratch* empty.
# (setq initial-scratch-message "")

# ;; Removes *scratch* from buffer after the mode has been set.
# (defun remove-scratch-buffer ()
#   (if (get-buffer "*scratch*")
#       (kill-buffer "*scratch*")))
# (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

# ;; Removes *messages* from the buffer.
# (setq-default message-log-max nil)
# (kill-buffer "*Messages*")

# ;; Removes *Completions* from buffer after you've opened a file.
# (add-hook 'minibuffer-exit-hook
#       '(lambda ()
#          (let ((buffer "*Completions*"))
#            (and (get-buffer buffer)
#                 (kill-buffer buffer)))))

# ;; Don't show *Buffer list* when opening multiple files at the same time.
# (setq inhibit-startup-buffer-menu t)

# ;; Show only one active window when opening multiple files at the same time.
# (add-hook 'window-setup-hook 'delete-other-windows)

# #+END_SRC
* Align Regex
#+BEGIN_SRC emacs-lisp
(defun bjm/align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))

(defun bjm/align-& (start end)
  "Align columns by ampersand"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)&" 1 1 t))
#+END_SRC
