* Package Manager
** setting up package manager

    #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives
	    '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)
    (setq inhibit-startup-message t) ;; get rid of startup screen
    (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

    #+END_SRC


* org-mode setup
** Ensuring org mode.

    #+BEGIN_SRC emacs-lisp
    (use-package org
    :ensure t)
    #+END_SRC

** Bullets instead of asterisks.

    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

** Down pointing arrow instead of "..." default org-mode symbol

    #+BEGIN_SRC emacs-lisp
    (setq org-ellipsis "â¤µ")
    #+END_SRC
   
* line numbers
** Setting linum mode and line numbers
    #+BEGIN_SRC emacs-lisp
    (global-linum-mode t)
    (setq linum-format "%4d \u2502 ")
    #+END_SRC

* auto pair bracket
** Setting electric pair mode
    #+BEGIN_SRC emacs-lisp
    (electric-pair-mode)
    #+END_SRC

* try package
** Ensuring try package.

    #+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
    #+END_SRC

* Whick Key

    #+BEGIN_SRC emacs-lisp
    (use-package which-key
    :ensure t
    :config
    (which-key-mode))
    #+END_SRC

* Evil mode
** Ensuring evil mode and making it default.

    #+BEGIN_SRC emacs-lisp
    (use-package evil
    :ensure t
    :config
    (evil-mode))
    #+END_SRC

* Ace window
** Ace window

    #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
    #+END_SRC

* Swipper and Counsel
** Some fancy search conf

    #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :ensure t
      )

    (use-package swiper
      :ensure try
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (global-set-key "\C-s" 'swiper)
        (global-set-key (kbd "C-c C-r") 'ivy-resume)
        (global-set-key (kbd "<f6>") 'ivy-resume)
        (global-set-key (kbd "M-x") 'counsel-M-x)
        (global-set-key (kbd "C-x C-f") 'counsel-find-file)
        (global-set-key (kbd "<f1> f") 'counsel-describe-function)
        (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
        (global-set-key (kbd "<f1> l") 'counsel-load-library)
        (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
        (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
        (global-set-key (kbd "C-c g") 'counsel-git)
        (global-set-key (kbd "C-c j") 'counsel-git-grep)
        (global-set-key (kbd "C-c k") 'counsel-ag)
        (global-set-key (kbd "C-x l") 'counsel-locate)
        (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
        (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
        ))

    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))

    (use-package avy
      :ensure t
      :config
      (avy-setup-default))

    #+END_SRC

* auto-complete
** auto complete config
    #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))

    #+END_SRC

* Theme config
** Ensuring badger-thene package is installed and loaded

    #+BEGIN_SRC emacs-lisp
;;    (use-package badger-theme
;;    :ensure t
;;    :config (load-theme 'badger))
    #+END_SRC


* flycheck jedi yasnippet
** Some config for development work

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))


(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup))


    (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
    #+END_SRC

* save place
** Remember last in position of a file. 
    #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
    #+END_SRC

* Show parenthesis
    #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
    #+END_SRC

* IRC Clinet
    #+BEGIN_SRC emacs-lisp
    (require 'erc)
    #+END_SRC

* Complete file Path
** Autocompletes file path in emacs

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-f") 'comint-dynamic-complete-filename)
    (provide '.emacs)
    #+END_SRC
